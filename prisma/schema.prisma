// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique @db.VarChar(50)
  username        String    @db.VarChar(100)
  emailVerified   DateTime? @map("email_verified")
  avatar          String?
  hashed_password String?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt

  // relations field
  accounts     Account[]
  listings     Listing[]
  reservations Reservation[]
  sessions     Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(uuid())
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  token_type        String?
  scope             String?
  id_token          String?
  session_date      String?
  expires_at        Int?
  session_state     String?

  // relation fields
  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  // constraints
  @@unique([provider, providerAccountId])
  // indexes
  @@index([user_id])
}

model Listing {
  id             String   @id @default(uuid())
  title          String
  description    String
  thumbnail      String
  category       String
  room_cnt       Int
  bathroom_cnt   Int
  guest_cnt      Int
  location_value String
  price          Int
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // relation fields
  user_id      String
  user         User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  reservations Reservation[]

  // indexes
  @@index([user_id])
}

model Reservation {
  id          String   @id @default(uuid())
  start_date  DateTime
  end_date    DateTime
  total_price Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // relation fields
  user_id    String
  user       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  listing_id String
  listing    Listing @relation(fields: [listing_id], references: [id], onDelete: Cascade)

  // indexes
  @@index([user_id, listing_id])
}
